import {
  ButtonInteraction,
  InteractionResponse,
  TextBasedChannel,
  ChannelType,
  PermissionsBitField,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
} from 'discord.js';
import Button from '../base/button';
import ColorUtil from '../utils/color-util';

export default class extends Button {
  public name = 'create-ticket';

  public async execute(
    interaction: ButtonInteraction<'cached'>,
  ): Promise<InteractionResponse | undefined> {
    // check if user have any existing tickets
    const existing = interaction.guild?.channels.cache.find((channel: any) =>
      channel.topic?.includes(interaction.member?.id),
    );
    if (existing) {
      return await interaction.reply({
        embeds: [
          {
            title: '–û—à–∏–±–∫–∞',
            description:
              '–£ —Ç–µ–±—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —Ç–∏–∫–µ—Ç!' +
              `\n–ü—Ä–æ–≤–µ—Ä—å –∫–∞–Ω–∞–ª \`${existing.name}\``,
            color: ColorUtil.RED_COLOR,
          },
        ],
        ephemeral: true,
      });
    }

    // creating new channel and setting permissions for user
    const ticket: TextBasedChannel = await interaction.guild?.channels.create({
      name: `üëî‚îÉ–ø–æ–∫—É–ø–∫–∞-${interaction.member?.displayName}`,
      type: ChannelType.GuildText,
      parent: process.env.TICKET_CATEGORY_ID,
      topic: `–ö–∞–Ω–∞–ª, –≥–¥–µ –ø–æ–∫—É–ø–∞–µ—Ç <@${interaction.member?.id}>`,
      permissionOverwrites: [
        {
          id: interaction.guild?.id,
          deny: [PermissionsBitField.Flags.ViewChannel],
        },
        {
          id: interaction.member?.id,
          allow: [
            PermissionsBitField.Flags.ViewChannel,
            PermissionsBitField.Flags.ReadMessageHistory,
            PermissionsBitField.Flags.SendMessages,
          ],
        },
      ],
    });

    await interaction.reply({
      embeds: [
        {
          title: '–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
          description: `–ü–µ—Ä–µ–π–¥–∏ –≤ –∫–∞–Ω–∞–ª \`${ticket.name}\``,
          color: ColorUtil.GREEN_COLOR,
        },
      ],
      ephemeral: true,
    });

    // ghost ping for everyone in ticket
    // const message = await ticket.send('@everyone');
    // message.delete();

    const button = new ButtonBuilder()
      .setCustomId('close-ticket')
      .setLabel('üîí –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
      .setStyle(ButtonStyle.Primary);

    await ticket.send({
      embeds: [
        {
          title: '–ü–æ–∫—É–ø–∫–∞ –∫–∏—Ç–æ–≤',
          description:
            '–£–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –∑–∞–∫–∞–∑–µ, –∑–∞–ø–æ–ª–Ω–∏–≤ —Ñ–æ—Ä–º—ã –Ω–∏–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è' +
            '\n\n> –ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞–≤—Ü—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞',
          color: ColorUtil.BLUE_COLOR,
          footer: {
            text: '–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∂–¥–∏ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–∞–ø–∏—à–µ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ',
          },
        },
      ],
      components: [new ActionRowBuilder<ButtonBuilder>().addComponents(button)],
    });
  }
}
